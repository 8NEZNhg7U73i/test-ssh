name: 'Maximize build disk space on windows runner'
description: 'Maximize the available disk space for your build job on windows runner'
branding:
  icon: 'crop'
  color: 'orange'
inputs:
  system-reserve-mb:
    description: 'Space to be left free on the system filesystem (C:), in Megabytes.'
    required: false
    default: '1024'
  temp-reserve-mb:
    description: 'Space to be left free on the temp filesystem (D:), in Megabytes.'
    required: false
    default: '100'
  pagefile-size-mb:
    description: 'pagefile maximum size to create, in Megabytes.'
    required: false
    default: '4096'
  build-mount-path:
    description: 'Absolute path to the mount point where the build space will be available, defaults to $GITHUB_WORKSPACE if unset.'
    required: false
  system-virtualdisk-path:
    description: 'Absolute file path for the virtualdisk image created on the system filesystem, the default is usually fine.'
    required: false
    default: 'C:\temp.vhd'
  temp-virtualdisk-path:
    description: 'Absolute file path for the virtualdisk image created on the temp filesystem, the default is usually fine.'
    required: false
    default: 'D:\temp.vhd'

runs:
  using: "composite"
  steps:
    - name: Disk space report before modification
      shell: powershell
      run: |
        echo "List disk"
        get-partition
        echo "List volume"
        get-volume
        echo

    - name: create vdisk
      shell: cmd
      run: |
        echo rem > c:\disk
        echo create vdisk file=C:\C.vhd maximum=87040 type=EXPANDABLE >> c:\disk
        echo attach vdisk >> c:\disk
        echo create vdisk file=D:\D.vhd maximum=10240 type=EXPANDABLE >> c:\disk
        echo attach vdisk >> c:\disk
        diskpart /s c:\disk

    - name: create pool
      shell: powershell
      run: |
        $WriteCacheSpace = 0.5
        $SSDTierReseverDivisorBlock = 0
        $HDDTierReseverDivisorBlock = 0
        $HDD = get-physicaldisk | where physicallocation -eq "C:\C.vhd"
        $SSD = get-physicaldisk | where physicallocation -eq "D:\D.vhd"
        $HDDphy = $HDD | get-disk
        $SSDphy = $SSD | get-disk
        $HDD | Reset-PhysicalDisk
        $SSD | Reset-PhysicalDisk
        Write-Output "Create StoragePool"
        $HDD = get-physicaldisk | where physicallocation -eq "C:\C.vhd"
        $SSD = get-physicaldisk | where physicallocation -eq "D:\D.vhd"
        #$vg = New-StoragePool -PhysicalDisks @($HDD , $SSD) -StorageSubSystemFriendlyName (Get-StorageSubSystem).FriendlyName -FriendlyName vg 
        #-ResiliencySettingName Simple
        $vg = New-StoragePool -FriendlyName vg -PhysicalDisks @($HDD , $SSD) -StorageSubSystemFriendlyName (Get-StorageSubSystem).FriendlyName #-WriteCacheSizeDefault 0
        # -ResiliencySettingName Simple
        $SSD | Set-PhysicalDisk -MediaType SSD
        $HDD | Set-PhysicalDisk -MediaType HDD
        $SSDTier = New-StorageTier -StoragePoolFriendlyName vg -FriendlyName SSDTier -MediaType SSD -ResiliencySettingName Simple
        $HDDTier = New-StorageTier -StoragePoolFriendlyName vg -FriendlyName HDDTier -MediaType HDD -ResiliencySettingName Simple
        $SSDTierSupportedSize = $SSDTier | Get-StorageTierSupportedSize
        $HDDTierSupportedSize = $HDDTier | Get-StorageTierSupportedSize
        $SSDTierDivisorBlockMax = [int64][math]::Floor( $($SSDTierSupportedSize.TierSizeMax) / $($SSDTierSupportedSize.TierSizeDivisor) )
        $HDDTierDivisorBlockMax = [int64][math]::Floor( $($HDDTierSupportedSize.TierSizeMax) / $($HDDTierSupportedSize.TierSizeDivisor) )
        #$SSDTierSize = [int64]( $($SSDTierSupportedSize.TierSizeMax) * $SSDTierSpace - $($SSDTierSupportedSize.TierSizeMax) * $SSDTierSpace % $($SSDTierSupportedSize.TierSizeDivisor) )
        #$HDDTierSize = [int64]( $($HDDTierSupportedSize.TierSizeMax) * $HDDTierSpace - $($HDDTierSupportedSize.TierSizeMax) * $HDDTierSpace % $($HDDTierSupportedSize.TierSizeDivisor) )
        $SSDTierDivisorBlock = ($SSDTierDivisorBlockMax - $SSDTierReseverDivisorBlock)
        $HDDTierDivisorBlock = ($HDDTierDivisorBlockMax - $HDDTierReseverDivisorBlock)
        $SSDTierSize = [int64]( $SSDTierDivisorBlock * $($SSDTierSupportedSize.TierSizeDivisor) )
        $HDDTierSize = [int64]( $HDDTierDivisorBlock * $($HDDTierSupportedSize.TierSizeDivisor) )
        #$SSDAllocated = [int64]$($SSD.allocatedSize)
        #$HDDAllocated = [int64]$($HDD.allocatedSize)
        $SSDRemain = [int64]( $($SSD.Size) - $($SSD.allocatedSize) )
        $HDDRemain = [int64]( $($HDD.Size) - $($HDD.allocatedSize) )
        $WriteCacheSize = [int64]( $($SSDTierSupportedSize.TierSizeMax) * $WriteCacheSpace )
        Write-Output "DivisorSizes: ( $($SSDTierSupportedSize.TierSizeDivisor), $($HDDTierSupportedSize.TierSizeDivisor) )" 
        Write-Output "TierSizeMax: ( $($SSDTierSupportedSize.TierSizeMax) , $($HDDTierSupportedSize.TierSizeMax) )"
        #Write-Output "TierSizeMin: ( $($SSDTierSupportedSize.TierSizeMin) , $($HDDTierSupportedSize.TierSizeMin) )"
        Write-Output "TierDivisorBlockMax: ( $SSDTierDivisorBlockMax , $HDDTierDivisorBlockMax )"
        Write-Output "TierDivisorBlock: ( $SSDTierDivisorBlock , $HDDTierDivisorBlock )"
        Write-Output "TierReseverDivisorBlock: ( $SSDTierReseverDivisorBlock , $HDDTierReseverDivisorBlock )"
        Write-Output "TierSizes: ( $SSDTierSize , $HDDTierSize )"
        Write-Output "DiskRemain: ( $SSDRemain , $HDDRemain )"
        Write-Output "DiskAllocated: ( $($SSD.allocatedSize) , $($HDD.allocatedSize) )"
        Write-Output "Create Virtualdisk"
        $lv = $( New-VirtualDisk -StoragePoolFriendlyName vg -FriendlyName lv -StorageTiers @($SSDTier , $HDDTier) -StorageTierSizes @($SSDTierSize , $HDDTierSize) -ResiliencySettingName Simple -WriteCacheSize 0)
        # -WriteCacheSize $WriteCacheSize
        if ($lv -ne $null) {
          $HDD = get-physicaldisk | where physicallocation -eq "C:\C.vhd"
          $SSD = get-physicaldisk | where physicallocation -eq "D:\D.vhd"
          $SSDRemain = [int64]( $($SSD.Size) - $($SSD.allocatedSize) )
          $HDDRemain = [int64]( $($HDD.Size) - $($HDD.allocatedSize) )
          Write-Output "DiskRemain: ( $SSDRemain, $HDDRemain )"
          Write-Output "DiskAllocated: ( $($SSD.allocatedSize) , $($HDD.allocatedSize) )"
          Get-VirtualDisk lv | Get-Disk | Initialize-Disk -PartitionStyle MBR -PassThru | New-Partition -DriveLetter Z -UseMaximumSize | Out-Null
          Initialize-Volume -DriveLetter Z -FileSystem NTFS -Confirm:$false -NewFileSystemLabel TieredVolume | Out-Null
        }

    - name: make junction target to the virtualdisk volume
      shell: cmd
      run: |
          cd D:\
          set dirname=${{ github.repository }}
          for /F "tokens=2 delims=/" %%i in ("%dirname%") do (
            set dirname=%%i
          )
          rmdir /s /q "D:\a"
          mkdir "Z:\datadir"
          mklink /D "D:\a" "Z:\datadir"
          mkdir "D:\a\%dirname%\%dirname%"

    - name: Disk space report after modification
      shell: powershell
      run: |
        echo "List disk"
        get-partition
        echo "List volume"
        get-volume
        echo
