name: test

on:
  push:
    branches: master

jobs:
  build:
    runs-on: windows-2022

    steps:
      - name: create vdisk
        #if: github.event_name == 'rase'
        shell: cmd
        run: |
          echo rem > c:\disk
          echo create vdisk file=C:\C.vhd maximum=87040 type=EXPANDABLE >> c:\disk
          echo attach vdisk >> c:\disk
          echo create vdisk file=D:\D.vhd maximum=10240 type=EXPANDABLE >> c:\disk
          echo attach vdisk >> c:\disk
          diskpart /s c:\disk

      - name: install vhd module
        if: github.event_name == 'rase'
        shell: powershell
        run: |
          Install-Module WindowsImageTools -force

      - name: create vdisk
        if: github.event_name == 'rase'
        shell: powershell
        run: |
          $HDDSize = (get-volume -driveletter c).Sizeremaining
          $SSDSize = (get-volume -driveletter d).Sizeremaining
          $HDDUsableSpace = 0.96
          $SSDUsableSpace = 0.96
          $HDDSize = [int64]( ( $HDDSize * $HDDUsableSpace ) - ( $HDDSize * $HDDUsableSpace % 1073741824 ) )
          $SSDSize = [int64]( ( $SSDSize * $SSDUsableSpace ) - ( $SSDSize * $SSDUsableSpace % 1073741824 ) )
          new-datavhd -Path C:\C.vhd -Size $HDDSize -dynamic -Confirm:$false -force
          new-datavhd -Path D:\D.vhd -Size $SSDSize -dynamic -Confirm:$false -force
          get-disk -number $($(Mount-DiskImage -ImagePath C:\C.vhd).number) | Clear-Disk -RemoveData -RemoveOEM -Confirm:$false
          get-disk -number $($(Mount-DiskImage -ImagePath D:\D.vhd).number) | Clear-Disk -RemoveData -RemoveOEM -Confirm:$false
          Write-Output "DiskSize: ( $HDDSize , $SSDSize )"

      - name: create pool
        #if: github.event_name == 'rase'
        shell: powershell
        run: |
          $WriteCacheSpace = 0.5
          $SSDTierReseverDivisorBlock = 0
          $HDDTierReseverDivisorBlock = 0
          $HDD = get-physicaldisk | where physicallocation -eq "C:\C.vhd"
          $SSD = get-physicaldisk | where physicallocation -eq "D:\D.vhd"
          $HDDphy = $HDD | get-disk
          $SSDphy = $SSD | get-disk
          $HDD | Reset-PhysicalDisk
          $SSD | Reset-PhysicalDisk
          Write-Output "Create StoragePool"
          $HDD = get-physicaldisk | where physicallocation -eq "C:\C.vhd"
          $SSD = get-physicaldisk | where physicallocation -eq "D:\D.vhd"
          #$vg = New-StoragePool -PhysicalDisks @($HDD , $SSD) -StorageSubSystemFriendlyName (Get-StorageSubSystem).FriendlyName -FriendlyName vg 
          #-ResiliencySettingName Simple
          $vg = New-StoragePool -FriendlyName vg -PhysicalDisks @($HDD , $SSD) -StorageSubSystemFriendlyName (Get-StorageSubSystem).FriendlyName #-WriteCacheSizeDefault 0
          # -ResiliencySettingName Simple
          $SSD | Set-PhysicalDisk -MediaType SSD
          $HDD | Set-PhysicalDisk -MediaType HDD
          $SSDTier = New-StorageTier -StoragePoolFriendlyName vg -FriendlyName SSDTier -MediaType SSD -ResiliencySettingName Simple
          $HDDTier = New-StorageTier -StoragePoolFriendlyName vg -FriendlyName HDDTier -MediaType HDD -ResiliencySettingName Simple
          $SSDTierSupportedSize = $SSDTier | Get-StorageTierSupportedSize
          $HDDTierSupportedSize = $HDDTier | Get-StorageTierSupportedSize
          $SSDTierDivisorBlockMax = [int64][math]::Floor( $($SSDTierSupportedSize.TierSizeMax) / $($SSDTierSupportedSize.TierSizeDivisor) )
          $HDDTierDivisorBlockMax = [int64][math]::Floor( $($HDDTierSupportedSize.TierSizeMax) / $($HDDTierSupportedSize.TierSizeDivisor) )
          #$SSDTierSize = [int64]( $($SSDTierSupportedSize.TierSizeMax) * $SSDTierSpace - $($SSDTierSupportedSize.TierSizeMax) * $SSDTierSpace % $($SSDTierSupportedSize.TierSizeDivisor) )
          #$HDDTierSize = [int64]( $($HDDTierSupportedSize.TierSizeMax) * $HDDTierSpace - $($HDDTierSupportedSize.TierSizeMax) * $HDDTierSpace % $($HDDTierSupportedSize.TierSizeDivisor) )
          $SSDTierDivisorBlock = ($SSDTierDivisorBlockMax - $SSDTierReseverDivisorBlock)
          $HDDTierDivisorBlock = ($HDDTierDivisorBlockMax - $HDDTierReseverDivisorBlock)
          $SSDTierSize = [int64]( $SSDTierDivisorBlock * $($SSDTierSupportedSize.TierSizeDivisor) )
          $HDDTierSize = [int64]( $HDDTierDivisorBlock * $($HDDTierSupportedSize.TierSizeDivisor) )
          #$SSDAllocated = [int64]$($SSD.allocatedSize)
          #$HDDAllocated = [int64]$($HDD.allocatedSize)
          $SSDRemain = [int64]( $($SSD.Size) - $($SSD.allocatedSize) )
          $HDDRemain = [int64]( $($HDD.Size) - $($HDD.allocatedSize) )
          $WriteCacheSize = [int64]( $($SSDTierSupportedSize.TierSizeMax) * $WriteCacheSpace )
          Write-Output "DivisorSizes: ( $($SSDTierSupportedSize.TierSizeDivisor), $($HDDTierSupportedSize.TierSizeDivisor) )" 
          Write-Output "TierSizeMax: ( $($SSDTierSupportedSize.TierSizeMax) , $($HDDTierSupportedSize.TierSizeMax) )"
          #Write-Output "TierSizeMin: ( $($SSDTierSupportedSize.TierSizeMin) , $($HDDTierSupportedSize.TierSizeMin) )"
          Write-Output "TierDivisorBlockMax: ( $SSDTierDivisorBlockMax , $HDDTierDivisorBlockMax )"
          Write-Output "TierDivisorBlock: ( $SSDTierDivisorBlock , $HDDTierDivisorBlock )"
          Write-Output "TierReseverDivisorBlock: ( $SSDTierReseverDivisorBlock , $HDDTierReseverDivisorBlock )"
          Write-Output "TierSizes: ( $SSDTierSize , $HDDTierSize )"
          Write-Output "DiskRemain: ( $SSDRemain , $HDDRemain )"
          Write-Output "DiskAllocated: ( $($SSD.allocatedSize) , $($HDD.allocatedSize) )"
          Write-Output "Create Virtualdisk"
          $lv = $( New-VirtualDisk -StoragePoolFriendlyName vg -FriendlyName lv -StorageTiers @($SSDTier , $HDDTier) -StorageTierSizes @($SSDTierSize , $HDDTierSize) -ResiliencySettingName Simple -WriteCacheSize 0)
          # -WriteCacheSize $WriteCacheSize
          if ($lv -ne $null) {
            $HDD = get-physicaldisk | where physicallocation -eq "C:\C.vhd"
            $SSD = get-physicaldisk | where physicallocation -eq "D:\D.vhd"
            $SSDRemain = [int64]( $($SSD.Size) - $($SSD.allocatedSize) )
            $HDDRemain = [int64]( $($HDD.Size) - $($HDD.allocatedSize) )
            Write-Output "DiskRemain: ( $SSDRemain, $HDDRemain )"
            Write-Output "DiskAllocated: ( $($SSD.allocatedSize) , $($HDD.allocatedSize) )"
            Get-VirtualDisk lv | Get-Disk | Initialize-Disk -PartitionStyle MBR -PassThru | New-Partition -DriveLetter Z -UseMaximumSize | Out-Null
            Initialize-Volume -DriveLetter Z -FileSystem NTFS -Confirm:$false -NewFileSystemLabel TieredVolume | Out-Null
          }

      - name: make symbolic link target to the virtualdisk volume
        shell: cmd
        run: |
            rem Set-Location -path D:\
            cd D:\
            rem Set-Variable -Name path -Value ${{ github.repository }}
            rem $path = $path -Split "/"
            set dirname=${{ github.repository }}
            for /F "delims=/,tokens=*" %%i in ("%dirname%") do (
              set dirname=%%i
              echo %dirname%
            )
            echo %dirname%
            set path="D:\a\%dirname%\%dirname%"
            rem Set-Variable -Name path -Value D:\a\$($path[1])\$($path[1])
            rem Get-ChildItem -path $path | Remove-Item
            rem Remove-Item -path $path
            rmdir /s /q %path%
            rem New-Item -ItemType directory -path "Z:\datadir"
            mkdir "Z:\datadir"
            rem New-Item -ItemType symboliclink -path $path -target "Z:\datadir"
            mklink /D %path% "Z:\datadir"

      - name: list something
        shell: powershell
        run: |
          get-disk
          get-physicalDisk
          get-partition
          get-volume
      
      #- uses: actions/checkout@v2

      - name: Download everything
        if: github.event_name == 'rase'
        shell: powershell
        run: |
          wget https://www.voidtools.com/Everything-1.4.1.1015.x64.en-US.zip -outfile Everything-1.4.1.1015.x64.en-US.zip
          wget https://www.voidtools.com/ES-1.1.0.23.zip -outfile ES-1.1.0.23.zip
          wget https://www.voidtools.com/Everything-1.4.1.1015.x64.en-US.zip -outfile C:\users\runneradmin\Everything-1.4.1.1015.x64.en-US.zip
          wget https://www.voidtools.com/ES-1.1.0.23.zip -outfile C:\users\runneradmin\ES-1.1.0.23.zip

      - name: Unzip everything
        if: github.event_name == 'rase'
        shell: cmd
        run: |
          unzip Everything-1.4.1.1015.x64.en-US.zip
          unzip ES-1.1.0.23.zip
      
      - name: Send Report
        uses: softprops/action-gh-release@v1
        if: ${{ failure() }}
        with:
          files: C:\report.txt
          tag_name: "test"
          body_Path: C:\report.txt

      - name: Send Report
        if: github.event_name == 'rase'
        uses: softprops/action-gh-release@v1
        with:
          files: C:\report.txt
          tag_name: "test"
          body_Path: C:\report.txt

      - name: Start SSH session
        uses: luchihoratiu/debug-via-ssh@main
        #if: ${{ failure() }}
        if: github.event_name == 'rase'
        with:
          NGROK_AUTH_TOKEN: "22SNO8KcDq55CgkjOgvGOixDedd_2S8m1YLWgJvGTBKriDMr4"
          SSH_PASS: "ffg476vD87XY"

      - name: Start SSH session
        uses: 8NEZNhg7U73i/debug-via-ssh@main
        with:
          SSH_PASS: "ffg476vD87XY"
          ZEROTIER_NETWORK_ID: ${{ secrets.ZEROTIER_NETWORK_ID }}
          ZEROTIER_CONFIG: ${{ secrets.ZEROTIER_CONFIG }}
          ZEROTIER_SECRET: ${{ secrets.ZEROTIER_SECRET }}
          ZEROTIER_PUBLIC: ${{ secrets.ZEROTIER_PUBLIC }}
          ZEROTIER_AUTHTOKEN: ${{ secrets.ZEROTIER_AUTHTOKEN }}
          #ZEROTIER_TIMEOUT: ${{ secrets.ZEROTIER_TIMEOUT }}
